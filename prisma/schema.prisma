// TankTrace Prisma Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OPERATOR
  CUSTOMER
}

enum TankStatus {
  DELIVERED
  RETURNED
}

enum TankSize {
  SIX_M3
  TEN_M3
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  name           String?
  password       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  roles          Role[]    @default([CUSTOMER])

  patients       Patient[]     @relation("CreatedBy")
  closedPatients Patient[]     @relation("ClosedBy")
  deliveredTanks OxygenTank[]  @relation("DeliveredTanks")
  receivedTanks  OxygenTank[]  @relation("ReceivedTanks")
}

model Patient {
  id          Int       @id @default(autoincrement())
  rut         String    @unique
  name        String
  address     String
  phone       String
  createdBy   User      @relation("CreatedBy", fields: [createdById], references: [id])
  createdById Int
  closedBy    User?     @relation("ClosedBy", fields: [closedById], references: [id])
  isClosed    Boolean   @default(false)
  closedById  Int?
  closedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  oxygenTanks    OxygenTank[]  @relation("PatientOxygenTanks")
}

model OxygenTank {
  id              Int          @id @default(autoincrement())
  size            TankSize
  status          TankStatus
  serialNumber    String

  deliveredAt     DateTime      @default(now())
  returnedAt      DateTime?

  // Relaciones
  patient         Patient       @relation("PatientOxygenTanks", fields: [patientId], references: [id])
  patientId       Int

  deliveredBy     User          @relation("DeliveredTanks", fields: [deliveredById], references: [id])
  deliveredById   Int

  receivedBy      User?         @relation("ReceivedTanks", fields: [receivedById], references: [id])
  receivedById    Int?
}